# 工作流名称
name: 编译lede的源

# 定义触发条件
on:
  # 允许通过 repository_dispatch 事件外部触发
  repository_dispatch:
  # 允许手动触发工作流
  workflow_dispatch:
    # 定义手动触发时的输入参数
    inputs:
      ssh:
        description: 'SSH connection to Actions'  # 参数描述
        required: false                          # 非必填参数
        default: 'false'                         # 默认值
        # 该参数用于控制是否建立 SSH 连接（用于调试或访问私有仓库）

# 全局环境变量
env:
  URL: https://github.com/coolsnowwolf/lede     # 源码仓库地址
  BRANCH: master                                # 使用的代码分支
  FEEDS_CONF: feeds.conf.default                # feeds 配置文件
  CONFIG_FILE: lede_n60pro.config               # 设备配置文件
  DIY_P1_SH: diy-part1.sh                       # 第一阶段自定义脚本
  DIY_P2_SH: diy-part2.sh                       # 第二阶段自定义脚本
  TZ: Asia/Shanghai                             # 时区设置

jobs:
  build:
    runs-on: ubuntu-22.04  # 使用 Ubuntu 22.04 运行环境
    steps:
    # 第一步：检出仓库代码
    - name: Checkout
      uses: actions/checkout@v4  # 使用官方 checkout 动作
    - name: 检查服务器配置
      run: |
        # 使用日志分组显示服务器信息
        echo "::group::🖥️ 服务器资源详情"
        echo "⚠️ 重要提示"
        echo "若服务器性能不足请立即取消运行！已知兼容型号：Ryzen 8370C/8171M"
        # 输出 CPU 信息
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo "CPU型号: $(lscpu | grep 'Model name' | cut -d: -f2 | xargs)"
        echo "CPU核心数: $(nproc)"
        # 输出内存信息
        echo "--------------------------内存信息--------------------------"
        echo "内存总量: $(free -h | awk '/Mem/{print $2}')"
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        # 输出磁盘信息
        echo "--------------------------硬盘信息--------------------------"
        df -Th
        echo "::endgroup::"
        
    - name: 初始化构建环境
      run: |
        # 清理系统残留文件
        sudo rm -rf /etc/apt/sources.list.d/* \
          /usr/share/dotnet \
          /usr/local/lib/android \
          /opt/ghc \
          /opt/hostedtoolcache/CodeQL
        # 清理 Docker 资源
        sudo docker system prune -a -f
        # 安装编译依赖包
        sudo apt-get -qq update
        sudo apt-get -qq install -y \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext \
          gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 \
          libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev \
          libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
          libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch \
          pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils \
          rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
          vim wget xmlto xxd zlib1g-dev
        # 设置时区
        sudo timedatectl set-timezone "$TZ"
        # 创建工作目录
        sudo mkdir -p /workdir
        sudo chown -R $USER:$GROUPS /workdir
        
    - name: 克隆源代码
      run: |
        echo "::group::📦 存储空间信息"
        df -hT $PWD  # 显示当前目录磁盘使用情况
        echo "::endgroup::"
        # 克隆指定分支的源码（深度克隆节省时间）
        git clone --depth 1 $URL -b $BRANCH openwrt
        # 创建符号链接到工作空间
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: 加载自定义配置diy-part1.sh
      run: |
        echo "::group::🚀 执行自定义脚本diy-part1.sh"
        # 应用 feeds 配置文件
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        # 执行自定义脚本
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        echo "::endgroup::"

    - name: 更新 feeds
      run: |
        cd openwrt
        echo "::group::🔄 更新软件源"
        ./scripts/feeds update -a
        echo "::endgroup::"

    - name: 安装 feeds
      run: |
        cd openwrt
        echo "::group::📥 安装软件包"
        ./scripts/feeds install -a
        echo "::endgroup::"

    - name: 加载自定义配置diy-part2.sh
      run: |
        echo "::group::🚀 执行自定义脚本diy-part2.sh"
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        echo "::endgroup::"
    - name: 下载依赖
      run: |
        cd openwrt
        make defconfig
        echo "::group::📦 下载软件包"
        make download -j$(($(nproc) + 1)) || make download -j1 V=s
        echo "::endgroup::"
        echo "::group::🔍 检查无效文件"
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        echo "::endgroup::"

    - name: 编译固件
      run: |
        echo "::group::🏗️ 编译日志 (详细模式)"
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
       
    - name: 收集编译结果
      if: ${{ always() }}
      run: |
        echo "::group::📊 最终存储空间使用"
        df -hT
        echo "::endgroup::"
    - name: 上传bin目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理输出文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传输出文件
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 发布固件至 Release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除工作流运行
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: 删除旧版本
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # 失败处理机制
    # - name: 失败则通知
    #   if: ${{ failure() }}
    #   uses: actions/github-script@v6
    #   with:
    #     script: |
    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: "❌ 编译失败！请检查 [工作流运行](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
    #       })
